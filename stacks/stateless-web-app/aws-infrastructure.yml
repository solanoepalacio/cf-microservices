AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Stateless web-app generic insfrastructure example.
  Inspired in Architecture presented in course "Ultimate AWS Certified Solutions Architect Associate 2020" by Stephane Marek (Udemy)

Parameters:
  EC2KeyName:
    Type: String
    Description: AWS SSH Key Name
  NodeServerUserData:
    Type: String
    Description: >
      Install nodejs server that logs locally to the instance and responds with the hostname

Resources: 
  StatelessWebappTestInstance: 
    Type: "AWS::EC2::Instance"
    Properties:
      KeyName:
        Ref: EC2KeyName
      ImageId: "ami-04b202bf877b5027b" # aws linux 2
      InstanceType: t2.micro
      UserData:
        Ref: NodeServerUserData
      AvailabilityZone: "sa-east-1a"
      SecurityGroups:
      - !Ref PublicSecurityGroup
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow SSH from anywhere
      GroupName: PublicSecurityGroup
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow SSH from anywhere
      GroupName: PublicSecurityGroup
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones:
      - "sa-east-1a"
      Instances:
      - Ref: StatelessWebappTestInstance
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'