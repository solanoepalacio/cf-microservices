AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Stateless web-app generic insfrastructure example.
  Inspired in Architecture presented in course "Ultimate AWS Certified Solutions Architect Associate 2020" by Stephane Marek (Udemy)

Parameters:
  EC2KeyName:
    Type: String
    Description: AWS SSH Key Name
  NodeServerUserData:
    Type: String
    Description: >
      Install nodejs server that logs locally to the instance and responds with the hostname

Resources:
  # DNS ===============

  PublicDNS:
    Type: AWS::Route53::RecordSet
    Properties: 
      HostedZoneName: solano.be.
      Name: stateless-web-app.solano.be.
      Region: "sa-east-1"
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LoadBalancer.DNSName
      SetIdentifier: Stateless-web-app

  # Security Groups ===============
  MainVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: false
      EnableDnsSupport: false
      InstanceTenancy: default


  # Security Groups ===============

  LBIngress:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow traffic from LB to EC2
      GroupName: LBIngress
      VpcId: !Ref MainVPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

  InstanceSSH:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: API service EC2 instance ssh access
      GroupName: ServiceInstance
      VpcId: !Ref MainVPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupName: !Ref LBIngress

  # Load Balancer ===============

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !GetAtt LBIngress.GroupId
      Subnets:
        - !Ref: subnet-1
        - !Ref: subnet-2

  WebListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref ServicesTargetGroup
  
  ServicesTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      VpcId: !Ref MainVPC
      Name: ServicesTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Targets: 
        - Port: 80
          AvailabilityZone: sa-east-1a
          Id: !Ref EC2ServiceInstance

  # Auto Scaling Group ==============

  ServiceASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      MaxSize: '3'
      MinSize: '1'
      DesiredCapacity: '2'
      AutoScalingGroupName: Stateless-web-app-asg
      AvailabilityZones: 
        - sa-east-1a
      Cooldown: '600'
      HealthCheckGracePeriod: 120
      TargetGroupARNs:
        - !Ref ServicesTargetGroup

  # EC2 Instances ===============

  EC2ServiceInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      KeyName:
        Ref: EC2KeyName
      ImageId: "ami-04b202bf877b5027b" # aws linux 2
      InstanceType: t2.micro
      UserData:
        Ref: NodeServerUserData
      AvailabilityZone: "sa-east-1a"
      SecurityGroups:
      - !Ref InstanceSSH
 